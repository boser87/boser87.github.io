{"version":3,"sources":["SelectNumberOfInputs.js","RadioWithInput.js","Checkbox.js","IconComplete.js","App.js","serviceWorker.js","index.js"],"names":["SelectNumberOfInputs","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleSelectChange","event","value","target","name","selectExportName","parseInt","handleInputChange","index","inputExportName","assign","inputsValue","defineProperty","_this2","containerStyle","selectedNumberOfInputs","display","react_default","a","createElement","Fragment","htmlFor","id","onChange","toConsumableArray","Array","maxNumberOfInputs","map","e","i","concat","key","style","type","React","Component","defaultProps","RadioWithInput","handleRadioChange","radioExportName","wrapStyle","radioValue","title","checked","isTextArea","className","rows","cols","inputValue","Checkbox","handleCheckboxChange","checkboxExportName","checkboxValue","IconComplete","isComplete","index_es","icon","faCheckCircle","MasterForm","isStep1Complete","setState","attendeesNumber","attendeesNames","length","slice","every","item","isStep2Complete","withCompanyName","companyName","withSpecialAccommodations","explainSpecialAccommodations","handleChange","handleSubmit","preventDefault","console","log","resetState","initialState","readyToRock","action","method","src_SelectNumberOfInputs","src_IconComplete","disabled","opacity","src_RadioWithInput","src_Checkbox","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14a609b9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectNumberOfInputs extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleSelectChange = event => {\n            const {value} = event.target\n            this.props.handleSelectChange({name: this.props.selectExportName, value: parseInt(value)});\n        };\n\n        this.handleInputChange = (event, index) => {\n            const {value} = event.target\n            this.props.handleInputChange({name: this.props.inputExportName, value: Object.assign([], this.props.inputsValue, {[index]: value})})\n        };\n\n    }\n\n    render () {\n        const containerStyle = this.props.selectedNumberOfInputs > 0 ? {} : {display: 'none'}\n\n        return (\n            <React.Fragment>\n                <label htmlFor=\"num_attendees\">\n                    How many people will be attending?\n                </label>\n                <select id=\"num_attendees\" name=\"num_attendees\" onChange={this.handleSelectChange} value={this.props.selectedNumberOfInputs}>\n                    <option id=\"opt_0\" value=\"0\">Please Choose</option>\n                    {\n                        [...Array(this.props.maxNumberOfInputs)].map((e, i) => <option id={`opt_${i+1}`} key={`opt_${i+1}`} value={i+1}>{i+1}</option>)\n                    }\n                </select>\n                <br/>\n                <div id=\"attendee_container\" style={containerStyle}>\n                    <h3>Please provide full names:</h3>\n                    {\n                        [...Array(this.props.selectedNumberOfInputs)].map((e, i) =>\n                            (<div id={`attendee_${i}_wrap`} key={`attendee_${i}_wrap`}>\n                                <label htmlFor={`name_attendee${i}`}>\n                                    Attendee {i+1} Name:\n                                </label>\n                                <input type=\"text\" id={`name_attendee${i}`} name={`name_attendee${i}`} onChange={(e) => this.handleInputChange(e, i)}/>\n                            </div>)\n                        )\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectNumberOfInputs.defaultProps = {\n};\n\nSelectNumberOfInputs.propTypes = {\n    maxNumberOfInputs: PropTypes.number,\n    handleSelectChange: PropTypes.func,\n    selectExportName: PropTypes.string,\n    handleInputChange: PropTypes.func,\n    inputExportName: PropTypes.string,\n    selectedNumberOfInputs: PropTypes.number,\n    inputsValue: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default SelectNumberOfInputs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass RadioWithInput extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleRadioChange = event => {\n            const {value} = event.target\n            this.props.handleRadioChange({name: this.props.radioExportName, value: (value === \"true\")});\n        };\n\n        this.handleInputChange = event => {\n            const {value} = event.target\n            this.props.handleInputChange({name: this.props.inputExportName, value: value});\n        };\n\n    }\n\n    render () {\n        const wrapStyle = this.props.radioValue ? {} : {display: 'none'} // TODO: use JS style?\n\n        return (\n            <React.Fragment>\n                <p>{this.props.title}</p>\n                <input type=\"radio\" id={`${this.props.name}_toggle_group_on`} name={`${this.props.name}_toggle_group`} value={true} checked={this.props.radioValue === true} onChange={this.handleRadioChange}/>\n                <label htmlFor={`${this.props.name}_toggle_group_on`}>Yes</label>\n                &emsp;\n                <input type=\"radio\" id={`${this.props.name}_toggle_group_off`} name={`${this.props.name}_toggle_group`} value={false} checked={this.props.radioValue === false} onChange={this.handleRadioChange}/>\n                <label htmlFor={`${this.props.name}_toggle_group_off`}>No</label>\n                    {(() => {\n                        if(!this.props.isTextArea) {\n                           return (\n                               <div id={`${this.props.name}_wrap`} style={wrapStyle}>\n                                    <label htmlFor={`${this.props.name}_text`}>\n                                        Company Name:\n                                    </label>\n                                    <input type=\"text\" id={`${this.props.name}_text`} onChange={this.handleInputChange} value={this.props.inputValue}/>\n                                </div>\n                           )\n                        } else {\n                            return (\n                                <div id={`${this.props.name}_wrap`} style={wrapStyle} className=\"label-textarea-wrap\">\n                                    <label htmlFor={`${this.props.name}_text`}>\n                                        Please explain below:\n                                    </label>\n                                    <textarea rows=\"10\" cols=\"10\" id={`${this.props.name}_text`} onChange={this.handleInputChange} value={this.props.inputValue}></textarea>\n                                </div>\n                            )\n                        }\n                    })()}\n            </React.Fragment>\n        );\n    }\n}\n\nRadioWithInput.defaultProps = {\n    isTextArea: false\n};\n\nRadioWithInput.propTypes = {\n    isTextArea: PropTypes.bool,\n    handleRadioChange: PropTypes.func,\n    radioExportName: PropTypes.string,\n    radioValue: PropTypes.bool,\n    handleInputChange: PropTypes.func,\n    inputExportName: PropTypes.string,\n    inputValue: PropTypes.string,\n    title: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default RadioWithInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Checkbox extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleCheckboxChange = event => {\n            const {checked} = event.target\n            this.props.handleCheckboxChange({name: this.props.checkboxExportName, value: checked});\n        };\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <label htmlFor=\"rock\">\n                    {this.props.title}\n                </label>\n                <input type=\"checkbox\" id=\"rock\" checked={this.props.checkboxValue} onChange={this.handleCheckboxChange} />\n            </React.Fragment>\n        );\n    }\n}\n\nCheckbox.defaultProps = {\n    isTextArea: false\n};\n\nCheckbox.propTypes = {\n    handleCheckboxChange: PropTypes.func,\n    checkboxExportName: PropTypes.string,\n    checkboxValue: PropTypes.bool,\n    title: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheckCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nclass IconComplete extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    render () {\n        const containerStyle = this.props.isComplete ? {} : {display: 'none'}\n\n        return (\n            <React.Fragment>\n                <div className=\"icon-container\" style={containerStyle}>\n                    <FontAwesomeIcon icon={faCheckCircle} />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nIconComplete.defaultProps = {\n    isComplete: false\n};\n\nIconComplete.propTypes = {\n    isComplete: PropTypes.bool\n};\n\nexport default IconComplete;\n","import './App.css';\nimport React from 'react';\nimport SelectNumberOfInputs from \"./SelectNumberOfInputs\";\nimport RadioWithInput from \"./RadioWithInput\";\nimport Checkbox from \"./Checkbox\";\nimport IconComplete from \"./IconComplete\";\n\nclass MasterForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isStep1Complete: false,\n            isStep2Complete: false,\n            attendeesNumber: 0,\n            attendeesNames: [],\n            withCompanyName: null,\n            companyName: \"\",\n            withSpecialAccommodations: null,\n            explainSpecialAccommodations: \"\",\n            readyToRock: false\n        }\n\n        this.initialState = this.state;\n    }\n\n    isStep1Complete = () => {\n        this.setState({\n            isStep1Complete:\n                this.state.attendeesNumber > 0 &&\n                this.state.attendeesNames.length === this.state.attendeesNumber &&\n                this.state.attendeesNames.slice(0, this.state.attendeesNumber).every(item => item.length > 0)\n        }, () => {\n            this.isStep2Complete();\n        })\n    }\n\n    isStep2Complete = () => {\n        this.setState({\n            isStep2Complete:\n                this.state.isStep1Complete &&\n                this.state.withCompanyName != null &&\n                (this.state.withCompanyName === false || (this.state.withCompanyName === true && this.state.companyName.length > 0)) &&\n                this.state.withSpecialAccommodations != null &&\n                (this.state.withSpecialAccommodations === false || (this.state.withSpecialAccommodations === true && this.state.explainSpecialAccommodations.length > 0))\n        })\n    }\n\n    handleChange = event => {\n        const {name, value} = event\n        this.setState({\n            [name]: value\n        }, () => {\n            this.isStep1Complete();\n            this.isStep2Complete();\n        })\n    }\n\n    handleSubmit = event => {\n        event.preventDefault()\n        console.log(this.state)\n        this.resetState()\n    }\n\n    resetState = () => {\n        this.setState(this.initialState)\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Seminar <span>Registration</span></h1>\n                <form action=\"#\" method=\"post\">\n                    <fieldset id=\"step_1\" className=\"step1\">\n                        <legend>Step 1</legend>\n                        <SelectNumberOfInputs\n                            maxNumberOfInputs={5}\n                            handleSelectChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            selectExportName={\"attendeesNumber\"}\n                            inputExportName={\"attendeesNames\"}\n                            selectedNumberOfInputs={this.state.attendeesNumber}\n                            inputsValue={this.state.attendeesNames} />\n                        <IconComplete\n                            isComplete={this.state.isStep1Complete} />\n                    </fieldset>\n                    <fieldset id=\"step_2\" disabled={!this.state.isStep1Complete} className=\"step2\" style={{opacity: this.state.isStep1Complete ? 1 : 0.5}}>\n                        <legend>Step 2</legend>\n                        <RadioWithInput\n                            handleRadioChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            radioExportName={\"withCompanyName\"}\n                            radioValue={this.state.withCompanyName}\n                            inputExportName={\"companyName\"}\n                            inputValue={this.state.companyName}\n                            title={\"Would you like your company name on badges?\"}\n                            name={\"company_name\"} />\n                        <RadioWithInput\n                            handleRadioChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            radioExportName={\"withSpecialAccommodations\"}\n                            radioValue={this.state.withSpecialAccommodations}\n                            inputExportName={\"explainSpecialAccommodations\"}\n                            inputValue={this.state.explainSpecialAccommodations}\n                            title={\"Special accommodations?\"}\n                            isTextArea={true}\n                            name={\"special_accommodations\"} />\n                        <IconComplete\n                            isComplete={this.state.isStep2Complete} />\n                    </fieldset>\n                    <fieldset id=\"step_3\" disabled={!this.state.isStep2Complete} className=\"step3\" style={{opacity: this.state.isStep2Complete ? 1 : 0.5}}>\n                        <legend>Step 3</legend>\n                        <Checkbox\n                            handleCheckboxChange={this.handleChange}\n                            checkboxExportName={\"readyToRock\"}\n                            checkboxValue={this.state.readyToRock}\n                            title={\"Ready to rock?\"}\n                        />\n                        <input type=\"submit\" id=\"submit_button\" disabled={!this.state.readyToRock} onClick={this.handleSubmit} value=\"Complete Registration\"/>\n                    </fieldset>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MasterForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MasterForm from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MasterForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}