{"version":3,"sources":["SelectNumberOfInputs.js","RadioWithInput.js","Checkbox.js","IconComplete.js","App.js","serviceWorker.js","index.js"],"names":["SelectNumberOfInputs","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleSelectChange","event","value","target","name","selectExportName","parseInt","handleInputChange","index","inputExportName","assign","inputsValue","defineProperty","_this2","containerStyle","selectedNumberOfInputs","display","react_default","a","createElement","Fragment","htmlFor","selectName","id","onChange","toConsumableArray","Array","maxNumberOfInputs","map","e","i","concat","key","inputName","style","type","React","Component","defaultProps","RadioWithInput","handleRadioChange","radioExportName","wrapStyle","radioValue","title","checked","isTextArea","className","rows","cols","inputValue","Checkbox","handleCheckboxChange","checkboxExportName","checkboxValue","IconComplete","isComplete","index_es","icon","faCheckCircle","MasterForm","isStep1Complete","setState","attendeesNumber","attendeesNames","length","slice","every","item","isStep2Complete","withCompanyName","companyName","withSpecialAccommodations","explainSpecialAccommodations","handleChange","handleSubmit","preventDefault","console","log","resetState","initialState","readyToRock","action","method","src_SelectNumberOfInputs","src_IconComplete","disabled","opacity","src_RadioWithInput","src_Checkbox","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96b3f3aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectNumberOfInputs extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleSelectChange = event => {\n            const {value} = event.target\n            this.props.handleSelectChange({name: this.props.selectExportName, value: parseInt(value)});\n        };\n\n        this.handleInputChange = (event, index) => {\n            const {value} = event.target\n            this.props.handleInputChange({name: this.props.inputExportName, value: Object.assign([], this.props.inputsValue, {[index]: value})})\n        };\n\n    }\n\n    render () {\n        const containerStyle = this.props.selectedNumberOfInputs > 0 ? {} : {display: 'none'}\n\n        return (\n            <React.Fragment>\n                <label htmlFor={this.props.selectName}>\n                    How many people will be attending?\n                </label>\n                <select id={this.props.selectName} name={this.props.selectName} onChange={this.handleSelectChange} value={this.props.selectedNumberOfInputs}>\n                    <option id=\"opt_0\" value=\"0\">Please Choose</option>\n                    {\n                        [...Array(this.props.maxNumberOfInputs)].map((e, i) => <option id={`opt_${i+1}`} key={`opt_${i+1}`} value={i+1}>{i+1}</option>)\n                    }\n                </select>\n                <br/>\n                <div id={`${this.props.inputName}_container`} style={containerStyle}>\n                    <h3>Please provide full names:</h3>\n                    {\n                        [...Array(this.props.selectedNumberOfInputs)].map((e, i) =>\n                            (<div id={`${this.props.inputName}_${i}_wrap`} key={`${this.props.inputName}_${i}_wrap`}>\n                                <label htmlFor={`${this.props.inputName}${i}`}>\n                                    Attendee {i+1} Name:\n                                </label>\n                                <input type=\"text\" id={`${this.props.inputName}${i}`} name={`${this.props.inputName}${i}`} onChange={(e) => this.handleInputChange(e, i)}/>\n                            </div>)\n                        )\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectNumberOfInputs.defaultProps = {\n};\n\nSelectNumberOfInputs.propTypes = {\n    maxNumberOfInputs: PropTypes.number,\n    handleSelectChange: PropTypes.func,\n    selectExportName: PropTypes.string,\n    handleInputChange: PropTypes.func,\n    inputExportName: PropTypes.string,\n    selectedNumberOfInputs: PropTypes.number,\n    inputsValue: PropTypes.arrayOf(PropTypes.string),\n    selectName: PropTypes.string,\n    inputName: PropTypes.string\n};\n\nexport default SelectNumberOfInputs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass RadioWithInput extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleRadioChange = event => {\n            const {value} = event.target\n            this.props.handleRadioChange({name: this.props.radioExportName, value: (value === \"true\")});\n        };\n\n        this.handleInputChange = event => {\n            const {value} = event.target\n            this.props.handleInputChange({name: this.props.inputExportName, value: value});\n        };\n\n    }\n\n    render () {\n        const wrapStyle = this.props.radioValue ? {} : {display: 'none'}\n\n        return (\n            <React.Fragment>\n                <p>{this.props.title}</p>\n                <input type=\"radio\" id={`${this.props.name}_toggle_group_on`} name={`${this.props.name}_toggle_group`} value={true} checked={this.props.radioValue === true} onChange={this.handleRadioChange}/>\n                <label htmlFor={`${this.props.name}_toggle_group_on`}>Yes</label>\n                &emsp;\n                <input type=\"radio\" id={`${this.props.name}_toggle_group_off`} name={`${this.props.name}_toggle_group`} value={false} checked={this.props.radioValue === false} onChange={this.handleRadioChange}/>\n                <label htmlFor={`${this.props.name}_toggle_group_off`}>No</label>\n                    {(() => {\n                        if(!this.props.isTextArea) {\n                           return (\n                               <div id={`${this.props.name}_wrap`} style={wrapStyle}>\n                                    <label htmlFor={`${this.props.name}_text`}>\n                                        Company Name:\n                                    </label>\n                                    <input type=\"text\" id={`${this.props.name}_text`} onChange={this.handleInputChange} value={this.props.inputValue}/>\n                                </div>\n                           )\n                        } else {\n                            return (\n                                <div id={`${this.props.name}_wrap`} style={wrapStyle} className=\"label-textarea-wrap\">\n                                    <label htmlFor={`${this.props.name}_text`}>\n                                        Please explain below:\n                                    </label>\n                                    <textarea rows=\"10\" cols=\"50\" id={`${this.props.name}_text`} onChange={this.handleInputChange} value={this.props.inputValue}></textarea>\n                                </div>\n                            )\n                        }\n                    })()}\n            </React.Fragment>\n        );\n    }\n}\n\nRadioWithInput.defaultProps = {\n    isTextArea: false\n};\n\nRadioWithInput.propTypes = {\n    isTextArea: PropTypes.bool,\n    handleRadioChange: PropTypes.func,\n    radioExportName: PropTypes.string,\n    radioValue: PropTypes.bool,\n    handleInputChange: PropTypes.func,\n    inputExportName: PropTypes.string,\n    inputValue: PropTypes.string,\n    title: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default RadioWithInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Checkbox extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleCheckboxChange = event => {\n            const {checked} = event.target\n            this.props.handleCheckboxChange({name: this.props.checkboxExportName, value: checked});\n        };\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <label htmlFor={this.props.name}>\n                    {this.props.title}\n                </label>\n                <input type=\"checkbox\" id={this.props.name} checked={this.props.checkboxValue} onChange={this.handleCheckboxChange} />\n            </React.Fragment>\n        );\n    }\n}\n\nCheckbox.defaultProps = {\n    isTextArea: false\n};\n\nCheckbox.propTypes = {\n    handleCheckboxChange: PropTypes.func,\n    checkboxExportName: PropTypes.string,\n    checkboxValue: PropTypes.bool,\n    name: PropTypes.string\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheckCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nclass IconComplete extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <div className=\"icon-container\" style={{display: this.props.isComplete ? '' : 'none'}}>\n                    <FontAwesomeIcon icon={faCheckCircle} />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nIconComplete.defaultProps = {\n    isComplete: false\n};\n\nIconComplete.propTypes = {\n    isComplete: PropTypes.bool\n};\n\nexport default IconComplete;\n","import './App.css';\nimport React from 'react';\nimport SelectNumberOfInputs from \"./SelectNumberOfInputs\";\nimport RadioWithInput from \"./RadioWithInput\";\nimport Checkbox from \"./Checkbox\";\nimport IconComplete from \"./IconComplete\";\n\nclass MasterForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isStep1Complete: false,\n            isStep2Complete: false,\n            attendeesNumber: 0,\n            attendeesNames: [],\n            withCompanyName: null,\n            companyName: \"\",\n            withSpecialAccommodations: null,\n            explainSpecialAccommodations: \"\",\n            readyToRock: false\n        }\n\n        this.initialState = this.state;\n    }\n\n    isStep1Complete = () => {\n        this.setState({\n            isStep1Complete:\n                this.state.attendeesNumber > 0 &&\n                this.state.attendeesNames.length === this.state.attendeesNumber &&\n                this.state.attendeesNames.slice(0, this.state.attendeesNumber).every(item => item.length > 0)\n        }, () => {\n            this.isStep2Complete();\n        })\n    }\n\n    isStep2Complete = () => {\n        this.setState({\n            isStep2Complete:\n                this.state.isStep1Complete &&\n                this.state.withCompanyName != null &&\n                (this.state.withCompanyName === false || (this.state.withCompanyName === true && this.state.companyName.length > 0)) &&\n                this.state.withSpecialAccommodations != null &&\n                (this.state.withSpecialAccommodations === false || (this.state.withSpecialAccommodations === true && this.state.explainSpecialAccommodations.length > 0))\n        })\n    }\n\n    handleChange = event => {\n        const {name, value} = event\n        this.setState({\n            [name]: value\n        }, () => {\n            this.isStep1Complete();\n            this.isStep2Complete();\n        })\n    }\n\n    handleSubmit = event => {\n        event.preventDefault()\n        console.log(this.state)\n        this.resetState()\n    }\n\n    resetState = () => {\n        this.setState(this.initialState)\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Seminar <span>Registration</span></h1>\n                <form action=\"#\" method=\"post\">\n                    <fieldset id=\"step_1\" className=\"step1\">\n                        <legend>Step 1</legend>\n                        <SelectNumberOfInputs\n                            maxNumberOfInputs={5}\n                            handleSelectChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            selectExportName={\"attendeesNumber\"}\n                            inputExportName={\"attendeesNames\"}\n                            selectedNumberOfInputs={this.state.attendeesNumber}\n                            inputsValue={this.state.attendeesNames}\n                            selectName={\"num_attendees\"}\n                            inputName={\"attendee\"}/>\n                        <IconComplete\n                            isComplete={this.state.isStep1Complete} />\n                    </fieldset>\n                    <fieldset id=\"step_2\" disabled={!this.state.isStep1Complete} className=\"step2\" style={{opacity: this.state.isStep1Complete ? 1 : 0.5}}>\n                        <legend>Step 2</legend>\n                        <RadioWithInput\n                            handleRadioChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            radioExportName={\"withCompanyName\"}\n                            radioValue={this.state.withCompanyName}\n                            inputExportName={\"companyName\"}\n                            inputValue={this.state.companyName}\n                            title={\"Would you like your company name on badges?\"}\n                            name={\"company_name\"} />\n                        <RadioWithInput\n                            handleRadioChange={this.handleChange}\n                            handleInputChange={this.handleChange}\n                            radioExportName={\"withSpecialAccommodations\"}\n                            radioValue={this.state.withSpecialAccommodations}\n                            inputExportName={\"explainSpecialAccommodations\"}\n                            inputValue={this.state.explainSpecialAccommodations}\n                            title={\"Special accommodations?\"}\n                            isTextArea={true}\n                            name={\"special_accommodations\"} />\n                        <IconComplete\n                            isComplete={this.state.isStep2Complete} />\n                    </fieldset>\n                    <fieldset id=\"step_3\" disabled={!this.state.isStep2Complete} className=\"step3\" style={{opacity: this.state.isStep2Complete ? 1 : 0.5}}>\n                        <legend>Step 3</legend>\n                        <Checkbox\n                            handleCheckboxChange={this.handleChange}\n                            checkboxExportName={\"readyToRock\"}\n                            checkboxValue={this.state.readyToRock}\n                            title={\"Are you ready to rock?\"}\n                            name={\"rock\"}\n                        />\n                        <input type=\"submit\" id=\"submit_button\" disabled={!this.state.readyToRock} onClick={this.handleSubmit} value=\"Complete Registration\"/>\n                    </fieldset>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MasterForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MasterForm from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MasterForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}